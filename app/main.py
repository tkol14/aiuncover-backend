from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from PIL import Image, ImageOps, ImageChops
import io, re, json
import numpy as np
import exifread
import os
import itertools
from collections import Counter

app = FastAPI(title="AIUncover API", version="1.3.0 - Expanded", debug=os.environ.get("DEBUG", "False").lower() == "true")

ALLOWED_ORIGINS = [
    "https://aiuncover.net",
    "https://www.aiuncover.net",
    "https://aiuncover-backend-production.up.railway.app",
    "https://api.aiuncover.net",
    "http://localhost:3000" # –î–æ–¥–∞–≤ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

class AnalyzeResponse(BaseModel):
    prob_ai: float
    explanations: list[str]
    checks: dict

# –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –®–Ü-—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
AI_TOOL_HINTS = [
    "stable diffusion", "stablediffusion", "sdxl", "novelai",
    "midjourney", "dall-e", "dalle", "leonardo", "flux", "playground",
    "firefly", "adobe firefly", "cf ai", "canva ai", "ideogram", "pollinations",
    "dreamstudio", "getimg.ai", "artbreeder", "pika labs", "runway", "gen-1", "gen-2",
    "aigenerated", "ai generated"
]

COMMON_AI_SIZES = {256, 384, 448, 512, 576, 640, 704, 768, 896, 960, 1024, 1152, 1280, 1536, 1792, 2048}
UNCOMMON_RATIOS = {
    (1, 1), (4, 3), (3, 4), (16, 9), (9, 16),
} # –î–æ–¥–∞–º–æ —Ç–∏–ø–æ–≤—ñ —Ñ–æ—Ç–æ-–ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó

def read_exif_hints(raw: bytes):
    hints = []
    has_exif = False
    ai_tool_found = False
    try:
        tags = exifread.process_file(io.BytesIO(raw), details=False)
        if tags:
            has_exif = True
            text = " ".join([str(v) for v in tags.values()]).lower()
            if any(h in text for h in AI_TOOL_HINTS):
                hints.append("üö© EXIF/XMP –º—ñ—Å—Ç–∏—Ç—å –∑–≥–∞–¥–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –®–Ü")
                ai_tool_found = True
        else:
            hints.append("üìù EXIF –≤—ñ–¥—Å—É—Ç–Ω—ñ–π (—á–∞—Å—Ç–∏–π –≤–∏–ø–∞–¥–æ–∫ –¥–ª—è –®–Ü)")
    except Exception:
        hints.append("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ EXIF")
    return has_exif, ai_tool_found, hints

def png_metadata_check(img: Image.Image, fmt: str):
    reasons = []
    ai_prompt_found = False
    if fmt == "PNG":
        try:
            # DALL-E, Midjourney —Ç–∞ —ñ–Ω—à—ñ —á–∞—Å—Ç–æ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å –º–µ—Ç–∞–¥–∞–Ω—ñ —É PNG tEXt chunks
            metadata = img.info
            text = json.dumps(metadata).lower()
            
            # –ü–æ—à—É–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –∫–ª—é—á—ñ–≤ –∞–±–æ –ø—ñ–¥–∫–∞–∑–æ–∫ –®–Ü
            if any(h in text for h in AI_TOOL_HINTS) or "prompt" in text or "parameters" in text:
                reasons.append("üö© PNG –º–µ—Ç–∞–¥–∞–Ω—ñ (tEXt) –º—ñ—Å—Ç—è—Ç—å –ø—ñ–¥–∫–∞–∑–∫–∏/–ø—Ä–æ–º–ø—Ç –®–Ü")
                ai_prompt_found = True
            elif "software" in metadata and any(h in metadata["software"].lower() for h in AI_TOOL_HINTS):
                reasons.append(f"üö© PNG –º–µ—Ç–∞–¥–∞–Ω—ñ: —É –ø–æ–ª—ñ 'Software' –∑–Ω–∞–π–¥–µ–Ω–æ –®–Ü-—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")

        except Exception:
            reasons.append("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ PNG –º–µ—Ç–∞–¥–∞–Ω—ñ")
    return ai_prompt_found, reasons

def load_image(raw: bytes):
    bio = io.BytesIO(raw)
    img = Image.open(bio)
    img.load()
    return img

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def size_checks(img: Image.Image):
    w, h = img.size
    reasons = []
    flags = {}
    
    # –ö—Ä–∞—Ç–Ω—ñ—Å—Ç—å 64/8
    mul_64 = (w % 64 == 0) and (h % 64 == 0)
    mul_8 = (w % 8 == 0) and (h % 8 == 0)
    
    # –¢–∏–ø–æ–≤—ñ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –®–Ü-—Ä–æ–∑–º—ñ—Ä–∏
    square_common = (w == h) and (w in COMMON_AI_SIZES)
    
    # –ù–µ—Ç–∏–ø–æ–≤—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
    g = gcd(w, h)
    ratio = (w // g, h // g)
    is_uncommon_ratio = ratio not in UNCOMMON_RATIOS and max(w, h) >= 512
    
    if mul_64:
        reasons.append("üìè –†–æ–∑–º—ñ—Ä–∏ –∫—Ä–∞—Ç–Ω—ñ 64 (—Å–∏–ª—å–Ω–∞ –æ–∑–Ω–∞–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤ Stable Diffusion, SDXL)")
    elif mul_8:
        reasons.append("üìè –†–æ–∑–º—ñ—Ä–∏ –∫—Ä–∞—Ç–Ω—ñ 8 (—Å–ª–∞–±–∫–∞ –æ–∑–Ω–∞–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤/–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó)")
        
    if square_common:
        reasons.append(f"üñºÔ∏è –ö–≤–∞–¥—Ä–∞—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç {w}√ó{h}, —Ç–∏–ø–æ–≤–∏–π –¥–ª—è –®–Ü-–º–æ–¥–µ–ª–µ–π")
        
    if is_uncommon_ratio and (w not in COMMON_AI_SIZES and h not in COMMON_AI_SIZES):
            reasons.append(f"üìê –ù–µ—Ç–∏–ø–æ–≤–∞ —á–∏ –¥—É–∂–µ –≤–∏—Å–æ–∫–∞/–Ω–∏–∑—å–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è {ratio[0]}:{ratio[1]} –¥–ª—è —Ñ–æ—Ç–æ")
        
    flags["mul64"] = mul_64
    flags["square_common"] = square_common
    flags["is_uncommon_ratio"] = is_uncommon_ratio
    flags["size"] = (w, h)
    return flags, reasons

def alpha_channel_weird(img: Image.Image, fmt: str):
    has_alpha = img.mode in ("LA", "RGBA", "P", "PA")
    if fmt == "JPEG" and has_alpha:
        return True, "‚ö†Ô∏è JPEG –∑ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º ‚Äî –Ω–µ—Ç–∏–ø–æ–≤–æ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó, –º–æ–∂–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é"
    return False, None

def high_freq_heuristic(img: Image.Image):
    # –õ–µ–≥–∫–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞: –≤–∞—Ä—ñ–∞—Ü—ñ—è –õ–∞–ø–ª–∞—Å—ñ–∞–Ω–∞ + —á–∞—Å—Ç–æ—Ç–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è (–Ω–µ –∑–º—ñ–Ω–µ–Ω–æ)
    gray = ImageOps.grayscale(img)
    gray_small = gray.resize((256, int(256 * gray.height / gray.width)), Image.Resampling.LANCZOS) if gray.width > 256 else gray
    arr = np.asarray(gray_small, dtype=np.float32) / 255.0

    # –õ–∞–ø–ª–∞—Å—ñ–∞–Ω —á–µ—Ä–µ–∑ —è–¥—Ä–æ
    k = np.array([[0, 1, 0],
                  [1,-4, 1],
                  [0, 1, 0]], dtype=np.float32)
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≥–æ—Ä—Ç–∫—É NumPy
    pad_width = 1
    arr_padded = np.pad(arr, pad_width, mode='edge')
    lap = np.abs(np.array([[np.sum(arr_padded[i:i+3, j:j+3] * k) for j in range(arr.shape[1])] for i in range(arr.shape[0])]))

    lap_var = float(np.var(lap))

    # FFT –µ–Ω–µ—Ä–≥—ñ—è –≤–∏—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç
    f = np.fft.fft2(arr)
    fshift = np.fft.fftshift(f)
    mag = np.abs(fshift)
    h, w = mag.shape
    cy, cx = h//2, w//2
    r = min(cy, cx)
    
    # –ù–∏–∑—å–∫—ñ —á–∞—Å—Ç–æ—Ç–∏ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ —á–≤–µ—Ä—Ç—å
    low = mag[cy-r//4:cy+r//4, cx-r//4:cx+r//4].sum() + 1e-6
    high = mag.sum() - low
    high_ratio = float(high / (high + low))

    # –ï–≤—Ä–∏—Å—Ç–∏–∫–∞: –¥—É–∂–µ –Ω–∏–∑—å–∫–∏–π LapVar —ñ –≤–æ–¥–Ω–æ—á–∞—Å –ø–æ–º—ñ—Ä–Ω–æ –≤–∏—Å–æ–∫–∏–π high_ratio -> "–ø–ª–∞—Å—Ç–º–∞—Å–æ–≤—ñ—Å—Ç—å"
    ai_like = (lap_var < 0.0003 and high_ratio > 0.55)
    expl = f"üî¨ –õ–æ–∫–∞–ª—å–Ω–∞ —Ä—ñ–∑–∫—ñ—Å—Ç—å (var Laplacian={lap_var:.4f}), —á–∞—Å—Ç–æ—Ç–Ω–µ –Ω–∞—Å–∏—á–µ–Ω–Ω—è={high_ratio:.2f}"
    
    # –Ø–∫—â–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ "–ø–ª–∞—Å—Ç–º–∞—Å–æ–≤—ñ—Å—Ç—å"
    if ai_like:
        expl = "üß† –°–∏–Ω—Ç–µ—Ç–∏—á–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞: –¥—É–∂–µ –Ω–∏–∑—å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–∞ —Ä—ñ–∑–∫—ñ—Å—Ç—å —ñ –ø–æ–º—ñ—Ä–Ω–æ –≤–∏—Å–æ–∫–∞ —á–∞—Å—Ç–æ—Ç–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è (–æ–∑–Ω–∞–∫–∞ '–ø–ª–∞—Å—Ç–º–∞—Å–æ–≤–æ—Å—Ç—ñ' –®–Ü)"
        
    return ai_like, expl, {"lap_var": lap_var, "high_ratio": high_ratio}

def jpeg_quant_hint(img: Image.Image, fmt: str):
    # –ù–µ –∑–º—ñ–Ω—é—î–º–æ, –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
    try:
        if fmt == "JPEG" and hasattr(img, "quantization") and img.quantization:
            q = img.quantization
            if len(q) <= 2 and all(len(v) == 64 for v in q.values()):
                return False, None
            else:
                return True, "üí° –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ JPEG quantization tables (—Å–ª–∞–±–∫–∞ –æ–∑–Ω–∞–∫–∞, –º–æ–∂–µ –±—É—Ç–∏ —Ä–µ-–∫–æ–º–ø—Ä–µ—Å—ñ—è)"
    except Exception:
        pass
    return False, None

def jpeg_artifact_hint(img: Image.Image, fmt: str):
    # –ï–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è (JPEG Ghost/ELA)
    if fmt == "JPEG" and img.mode in ("RGB", "L"):
        try:
            # –Ü–¥–µ—è: —Å—Ç–∏—Å–Ω—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≤–∏—Å–æ–∫–æ—é —è–∫—ñ—Å—Ç—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Q=95) —ñ –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª–æ–º.
            # –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∂–µ —Å—Ç–∏—Å–Ω—É—Ç–æ, —Ç–æ —Ä—ñ–∑–Ω–∏—Ü—è (–∑–∞–ª–∏—à–∫–æ–≤—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏) –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ—é.
            # –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –®–Ü, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ—Ç–∏–ø–æ–≤–∏–º–∏.
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –±—É—Ñ–µ—Ä —ñ —Å—Ç–∏—Å–∫–∞—î–º–æ –∑ Q=95
            temp_io = io.BytesIO()
            img.save(temp_io, format="JPEG", quality=95)
            re_compressed = Image.open(temp_io)
            
            # –û–±—á–∏—Å–ª—é—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é (ELA-–ø–æ–¥—ñ–±–Ω–∏–π –µ—Ñ–µ–∫—Ç)
            diff = ImageChops.difference(img, re_compressed)
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —á–æ—Ä–Ω–æ-–±—ñ–ª–µ —ñ –∑–Ω–∞—Ö–æ–¥–∏–º–æ —Å–µ—Ä–µ–¥–Ω—î –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
            diff_gray = ImageOps.grayscale(diff)
            arr = np.asarray(diff_gray, dtype=np.float32)
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ü—ñ (—è–∫–∞ –º–∞—î –±—É—Ç–∏ –Ω–∏–∑—å–∫–æ—é –¥–ª—è "—á–∏—Å—Ç–æ–≥–æ" –®–Ü)
            std_dev = np.std(arr)
            
            # –°–µ—Ä–µ–¥–Ω—î –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (—è–∫–µ –º–∞—î –±—É—Ç–∏ –≤–∏—â–∏–º –¥–ª—è –ø–µ—Ä–µ-—Å—Ç–∏—Å–Ω—É—Ç–∏—Ö)
            mean_abs_dev = np.mean(np.abs(arr))
            
            # –ï–º–ø—ñ—Ä–∏—á–Ω–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞
#            –ß–∏—Å—Ç—ñ –®–Ü-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–±–µ–∑ –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è) –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –¥—É–∂–µ –Ω–∏–∑—å–∫–∏–π std_dev.
            is_low_artifact = (std_dev < 10.0 and mean_abs_dev < 5.0) # –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —è–∫–æ—Å—Ç—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
            
            if is_low_artifact:
                # –î—É–∂–µ –Ω–∏–∑—å–∫–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–µ-–∫–æ–º–ø—Ä–µ—Å—ñ—ó –º–æ–∂–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ "—á–∏—Å—Ç–µ" –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                return True, "üñºÔ∏è –î—É–∂–µ –Ω–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤ (STD={std_dev:.2f}, Mean={mean_abs_dev:.2f}) –ø—ñ—Å–ª—è —Ä–µ-–∫–æ–º–ø—Ä–µ—Å—ñ—ó (–º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –®–Ü)"
                
        except Exception:
            pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
    return False, None

@app.get("/health")
def health():
    return {"status": "ok"}

@app.post("/analyze/image", response_model=AnalyzeResponse)
async def analyze_image(file: UploadFile = File(...)):
    raw = await file.read()
    if not raw:
        raise HTTPException(400, "–ü–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª")

    explanations = []
    checks = {}

    # 1) EXIF/XMP
    has_exif, ai_tool_found_exif, hints = read_exif_hints(raw)
    explanations += hints
    checks["has_exif"] = has_exif
    checks["ai_tool_found_exif"] = ai_tool_found_exif
    
    # 2) –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    try:
        img = load_image(raw)
    except Exception:
        explanations.append("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ñ–∞–π–ª)")
        return AnalyzeResponse(prob_ai=0.8, explanations=explanations, checks={"open_error": True})

    fmt = (img.format or "").upper()
    checks["format"] = fmt

    # 3) PNG –º–µ—Ç–∞–¥–∞–Ω—ñ (—è–∫—â–æ PNG)
    ai_found_png, png_reasons = png_metadata_check(img, fmt)
    checks["ai_found_png_metadata"] = ai_found_png
    explanations += png_reasons
    
    # 4) –†–æ–∑–º—ñ—Ä–∏ —Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
    size_flags, size_reasons = size_checks(img)
    checks.update(size_flags)
    explanations += size_reasons

    # 5) –ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª (–¥–∏–≤–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó)
    weird_alpha, alpha_reason = alpha_channel_weird(img, fmt)
    checks["weird_alpha"] = weird_alpha
    if alpha_reason:
        explanations.append(alpha_reason)

    # 6) –ü—Ä–æ—Å—Ç–∞ —á–∞—Å—Ç–æ—Ç–Ω–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞ (–ø–ª–∞—Å—Ç–º–∞—Å–æ–≤—ñ—Å—Ç—å/–Ω–∞–¥—Ç–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω—ñ –∫—Ä–∞—ó)
    ai_like_freq, freq_expl, freq_vals = high_freq_heuristic(img)
    checks["ai_like_freq"] = ai_like_freq
    checks["freq"] = freq_vals
    explanations.append(freq_expl)

    # 7) JPEG quantization (—Å–ª–∞–±–∫–∞ –æ–∑–Ω–∞–∫–∞)
    q_hint, q_reason = jpeg_quant_hint(img, fmt)
    checks["jpeg_quant_weird"] = q_hint
    if q_reason:
        explanations.append(q_reason)

    # 8) –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ JPEG (–µ–≤—Ä–∏—Å—Ç–∏–∫–∞)
    low_artifact_hint, artifact_reason = jpeg_artifact_hint(img, fmt)
    checks["low_artifact_hint"] = low_artifact_hint
    if artifact_reason:
        explanations.append(artifact_reason)
    
    # ---- –ó–≤–∞–∂—É–≤–∞–Ω–Ω—è –æ–∑–Ω–∞–∫ (–ª–µ–≥–∫–∞ –ª—ñ–Ω—ñ–π–Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è) ----
    score = 0.0
    
    # –°–∏–ª—å–Ω—ñ –æ–∑–Ω–∞–∫–∏
    if ai_tool_found_exif or ai_found_png: score += 0.40 # –ù–∞–π—Å–∏–ª—å–Ω—ñ—à–∏–π –¥–æ–∫–∞–∑
    if not has_exif and not ai_found_png and fmt == "JPEG": score += 0.15 # –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å EXIF —É JPEG
    if size_flags["mul64"]:               score += 0.20 # –ö—Ä–∞—Ç–Ω—ñ—Å—Ç—å 64
    if size_flags["square_common"]:       score += 0.15 # –¢–∏–ø–æ–≤–∏–π –∫–≤–∞–¥—Ä–∞—Ç
    
    # –ü–æ–º—ñ—Ä–Ω—ñ –æ–∑–Ω–∞–∫–∏
    if weird_alpha:                       score += 0.10
    if ai_like_freq:                      score += 0.20 # –°–∏–Ω—Ç–µ—Ç–∏—á–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞
    if size_flags["is_uncommon_ratio"]:   score += 0.05
    if low_artifact_hint:                 score += 0.10 # –°—Ö–æ–∂–µ –Ω–∞ —á–∏—Å—Ç–µ –ø–µ—Ä—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

    # –°–ª–∞–±–∫—ñ –æ–∑–Ω–∞–∫–∏
    if q_hint:                            score += 0.05
    
    # –ü–æ—Ç–æ–ª–æ–∫ —ñ –ø—ñ–¥–ª–æ–≥–∞
    prob_ai = float(max(0.0, min(1.0, score)))

    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –¥—É–∂–µ –º–∞–ª–∏—Ö –∞–±–æ –¥—É–∂–µ –≤–µ–ª–∏–∫–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
    w, h = size_flags["size"]
    max_dim = max(w, h)
    
    if max_dim < 384:
        prob_ai = min(1.0, prob_ai + 0.05) # –ù–µ–≤–µ–ª–∏–∫—ñ –®–Ü-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    if max_dim > 2048 and not ai_tool_found_exif:
        # –î—É–∂–µ –≤–µ–ª–∏–∫—ñ —Ä–æ–∑–º—ñ—Ä–∏ –º–µ–Ω—à —Ç–∏–ø–æ–≤—ñ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –ø—É–±–ª—ñ—á–Ω–∏—Ö –®–Ü-–º–æ–¥–µ–ª–µ–π
        prob_ai = max(0.0, prob_ai - 0.10) 


    return AnalyzeResponse(
        prob_ai=round(prob_ai, 2),
        explanations=explanations or ["‚úÖ –û–∑–Ω–∞–∫ –®–Ü –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ —è–≤–Ω–∏—Ö (–∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ–±—Ä–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ)"],
        checks=checks
    )